import 'dart:developer';
import 'dart:io';

import 'package:altio/backend/database/memory.dart';
import 'package:altio/core/constants/constants.dart';
import 'package:altio/core/theme/app_colors.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:share_plus/share_plus.dart';

enum BottomSheetView { share, exportTranscript, exportSummary }

enum ExportType { txt, pdf, markdown }

void _copyTranscript(BuildContext context, Memory memory) {
  Clipboard.setData(ClipboardData(text: memory.transcript));
  avmSnackBar(context, "Transcript copied to clipboard");
  HapticFeedback.lightImpact();
}

void _copySummary(BuildContext context, Memory memory) {
  if (memory.structured.target != null) {
    final summary = memory.structured.target!.toString();
    Clipboard.setData(ClipboardData(text: summary));
    HapticFeedback.lightImpact();
    avmSnackBar(context, "Summary copied to clipboard");
  }
}

const String header = "Generated by Altio AI";

void _exportPDF(Memory memory, bool isTranscript) async {
  final pdf = pw.Document();

  final structured = memory.structured.target!;

  if (isTranscript) {
    pdf.addPage(
      pw.Page(
        build: (pw.Context context) => pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Text('Transcript Export',
                style: const pw.TextStyle(fontSize: 20)),
            pw.SizedBox(height: 12),
            pw.Text(memory.getTranscript(generate: true),
                style: const pw.TextStyle(fontSize: 12)),
            pw.SizedBox(height: 12),
          ],
        ),
      ),
    );
  } else {
    pdf.addPage(
      pw.Page(
        build: (pw.Context context) => pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Text(structured.title, style: const pw.TextStyle(fontSize: 24)),
            pw.SizedBox(height: 12),
            pw.Text('Summary', style: const pw.TextStyle(fontSize: 18)),
            pw.Text(structured.overview),
            pw.SizedBox(height: 12),
            pw.Text('Events', style: const pw.TextStyle(fontSize: 18)),
            ...structured.events.map((e) => pw.Text('- ${e.description}')),
            pw.SizedBox(height: 12),
            pw.Text('Action Items', style: const pw.TextStyle(fontSize: 18)),
            ...structured.actionItems.map((e) => pw.Text('- ${e.description}')),
          ],
        ),
      ),
    );
  }

  final directory = await getApplicationDocumentsDirectory();
  final file = File('${directory.path}/memory_export.pdf');
  await file.writeAsBytes(await pdf.save());

  await Share.shareXFiles([XFile(file.path)], text: header);
}

void _exportTranscriptTxt(Memory memory) async {
  final transcript = memory.getTranscript(generate: true);

  if (transcript.isEmpty) {
    log("Transcript is empty");
    return;
  }

  final content = StringBuffer()
    ..writeln(transcript)
    ..writeln()
    ..writeln()
    ..writeln(header);

  final directory = await getApplicationDocumentsDirectory();
  final transcriptFile = File('${directory.path}/memory_transcript.txt');
  await transcriptFile.writeAsString(content.toString());

  // Share the file
  await Share.shareXFiles([XFile(transcriptFile.path)], text: header);
}

void _exportSummaryTxt(Memory memory) async {
  final structured = memory.structured.target;

  // Check if structured data exists
  if (structured == null) {
    log("Structured data is null");
    return;
  }

  final content = StringBuffer()
    ..writeln(structured.title)
    ..writeln('\n')
    ..writeln('Summary:')
    ..writeln(structured.overview)
    ..writeln('\n')
    ..writeln('Events:')
    ..writeAll(
      structured.events.isNotEmpty
          ? structured.events.map((e) => '- ${e.description}\n')
          : ['No events available.\n'],
    )
    ..writeln('\n')
    ..writeln('Action Items:')
    ..writeAll(
      structured.actionItems.isNotEmpty
          ? structured.actionItems.map((e) => '- ${e.description}\n')
          : ['No action items available.\n'],
    )
    ..writeln('\n')
    ..writeln('\n')
    ..writeln(header);

  final directory = await getApplicationDocumentsDirectory();
  final summaryFile = File('${directory.path}/summary.txt');
  await summaryFile.writeAsString(content.toString());

  await Share.shareXFiles([XFile(summaryFile.path)], text: header);
}

void _exportSummaryMarkdown(Memory memory) async {
  final directory = await getApplicationDocumentsDirectory();
  final markdownFile = File('${directory.path}/memory_export.md');
  final structured = memory.structured.target!;
  final markdown = """
    # Summary Export

    ## Title: ${structured.title}


    ### Action Items
    ${structured.actionItems.map((e) => '- ${e.description}').join('\n')}

    ### summary
    ${memory.structured.target?.overview}
    """
      .replaceAll('    ', '');
  await markdownFile.writeAsString(markdown);

  await Share.shareXFiles([XFile(markdownFile.path)], text: header);
}

void showShareBottomSheet(
  BuildContext context,
  Memory memory,
  StateSetter setState,
) async {
  BottomSheetView currentView = BottomSheetView.share;
  ExportType? exportType;

  await showModalBottomSheet(
    context: context,
    isScrollControlled: true,
    shape: const RoundedRectangleBorder(
      borderRadius: BorderRadius.only(
          topLeft: Radius.circular(16), topRight: Radius.circular(16)),
    ),
    builder: (ctx) {
      return StatefulBuilder(
        builder: (BuildContext context, StateSetter setModalState) {
          void updateView(BottomSheetView view) {
            setModalState(() {
              currentView = view;
            });
          }

          void setExportType(ExportType type) {
            setModalState(() {
              exportType = type;
              ("Type Set to: ${type.name}");
            });
          }

          return Container(
            decoration: const BoxDecoration(
              color: AppColors.white,
              borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(16), topRight: Radius.circular(16)),
            ),
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisSize: MainAxisSize.min,
              children: [
                if (currentView == BottomSheetView.share) ...[
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      const Icon(
                        Icons.description,
                        size: 32,
                      ),
                      w8,
                      Expanded(
                        child: Text(
                          maxLines: 2,
                          '${memory.discarded ? 'Discarded Memory' : memory.structured.target?.title}',
                          overflow: TextOverflow.ellipsis,
                          style: const TextStyle(
                            fontSize: 16,
                            height: 1.3,
                          ),
                        ),
                      ),
                      w4,
                      IconButton(
                        icon: const Icon(
                          Icons.cancel_outlined,
                          size: 27,
                        ),
                        onPressed: () => Navigator.of(ctx).pop(),
                      ),
                    ],
                  ),
                  const Divider(
                    thickness: 1,
                  ),
                  Card(
                    color: AppColors.commonPink,
                    shape: RoundedRectangleBorder(borderRadius: br12),
                    child: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 8),
                      child: Column(
                        children: [
                          _buildListTile(
                            context,
                            title: 'Copy Transcript',
                            icon: Icons.copy_rounded,
                            onTap: () => {
                              Navigator.pop(ctx),
                              _copyTranscript(context, memory)
                            },
                          ),
                          memory.discarded
                              ? const SizedBox.shrink()
                              : _buildListTile(
                                  context,
                                  title: 'Copy Summary',
                                  icon: Icons.file_copy,
                                  onTap: () => {
                                    Navigator.pop(ctx),
                                    _copySummary(context, memory)
                                  },
                                ),
                        ],
                      ),
                    ),
                  ),
                  h8,
                  Card(
                    color: AppColors.commonPink,
                    shape: memory.discarded
                        ? null
                        : RoundedRectangleBorder(borderRadius: br12),
                    child: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 8),
                      child: Column(
                        children: [
                          _buildListTile(
                            context,
                            title: 'Export Transcript',
                            icon: Icons.description,
                            onTap: () {
                              updateView(BottomSheetView.exportTranscript);
                            },
                          ),
                          memory.discarded
                              ? const SizedBox.shrink()
                              : _buildListTile(
                                  context,
                                  title: 'Export Summary',
                                  icon: Icons.summarize,
                                  onTap: () =>
                                      updateView(BottomSheetView.exportSummary),
                                ),
                        ],
                      ),
                    ),
                  ),
                  h16,
                ] else if (currentView == BottomSheetView.exportTranscript) ...[
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Padding(
                        padding: EdgeInsets.symmetric(horizontal: 12),
                        child: Text('Export Transcript',
                            style: TextStyle(fontSize: 18, height: 1.3)),
                      ),
                      IconButton(
                        icon: const Icon(
                          Icons.cancel_outlined,
                          size: 27,
                        ),
                        onPressed: () => updateView(BottomSheetView.share),
                      ),
                    ],
                  ),
                  h8,
                  Card(
                    color: AppColors.commonPink,
                    child: Column(
                      children: [
                        ListTile(
                          leading: const Icon(Icons.text_snippet),
                          title: const Text('TXT'),
                          trailing: SizedBox(
                              width: 60,
                              child: exportType == ExportType.txt
                                  ? const Icon(Icons.check_outlined)
                                  : Container()),
                          onTap: () => setExportType(ExportType.txt),
                        ),
                      ],
                    ),
                  ),
                  h8,
                  SizedBox(
                    height: 50,
                    width: double.infinity,
                    child: ElevatedButton(
                      style: ElevatedButton.styleFrom(),
                      onPressed: () {
                        switch (exportType) {
                          case ExportType.pdf:
                            _exportPDF(memory, true);
                            break;
                          case ExportType.txt:
                            _exportTranscriptTxt(memory);
                            break;
                          default:
                            // _fullExport(memory, context, true);
                            break;
                        }
                      },
                      child: const Text('Export',
                          style: TextStyle(
                              fontSize: 17,
                              fontWeight: FontWeight.w500,
                              color: AppColors.white)),
                    ),
                  ),
                  h16,
                ] else if (currentView == BottomSheetView.exportSummary) ...[
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Padding(
                          padding: EdgeInsets.symmetric(horizontal: 12.0),
                          child: Text('Export Summary',
                              style: TextStyle(fontSize: 18, height: 1.3))),
                      IconButton(
                        icon: const Icon(
                          Icons.cancel_outlined,
                          size: 27,
                        ),
                        onPressed: () => updateView(BottomSheetView.share),
                      ),
                    ],
                  ),
                  h8,
                  Card(
                    color: AppColors.commonPink,
                    child: Column(
                      children: [
                        ListTile(
                          leading: const Icon(Icons.text_snippet),
                          title: const Text('TXT'),
                          onTap: () => setExportType(ExportType.txt),
                          trailing: SizedBox(
                            child: exportType == ExportType.txt
                                ? const Icon(Icons.check_outlined)
                                : null,
                          ),
                        ),
                        ListTile(
                          leading: const Icon(Icons.picture_as_pdf),
                          title: const Text('PDF'),
                          onTap: () => setExportType(ExportType.pdf),
                          trailing: SizedBox(
                            child: exportType == ExportType.pdf
                                ? const Icon(Icons.check_outlined)
                                : null,
                          ),
                        ),
                      ],
                    ),
                  ),
                  h8,
                  SizedBox(
                    height: 50,
                    width: double.infinity,
                    child: ElevatedButton(
                      onPressed: () {
                        switch (exportType) {
                          case ExportType.pdf:
                            _exportPDF(memory, false);
                            break;
                          case ExportType.markdown:
                            _exportSummaryMarkdown(memory);
                            break;
                          case ExportType.txt:
                            _exportSummaryTxt(memory);
                            break;
                          default:
                            break;
                        }
                      },
                      child: const Text(
                        'Export',
                        style: TextStyle(
                            fontSize: 17, fontWeight: FontWeight.w500),
                      ),
                    ),
                  ),
                  h16,
                ]
              ],
            ),
          );
        },
      );
    },
  );
}

ListTile _buildListTile(
  BuildContext context, {
  required String title,
  required IconData icon,
  required VoidCallback onTap,
}) =>
    ListTile(title: Text(title), leading: Icon(icon), onTap: onTap);
