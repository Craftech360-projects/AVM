// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Instabug
import Foundation
@_exported import Instabug
import Swift
import SwiftUI
import _AppIntents_SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Toggle {
  public static func ibg_init<I>(isOn: Swift.Bool, intent: I, @SwiftUI.ViewBuilder label: () -> Label) -> some SwiftUI.View where I : AppIntents.AppIntent
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Toggle where Label == SwiftUI.Text {
  public static func ibg_init(_ titleKey: SwiftUI.LocalizedStringKey, isOn: Swift.Bool, intent: some AppIntent) -> some SwiftUI.View
  
  public static func ibg_init<S>(_ title: S, isOn: Swift.Bool, intent: some AppIntent) -> some SwiftUI.View where S : Swift.StringProtocol
  
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) final public class InstabugSwiftUIViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) final public var viewName: Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 14.0, watchOS 6.0, *)
extension SwiftUI.Toggle {
  public static func ibg_init(isOn: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder label: () -> Label) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 14.0, watchOS 6.0, *)
extension SwiftUI.Toggle where Label == SwiftUI.Text {
  public static func ibg_init(_ titleKey: SwiftUI.LocalizedStringKey, isOn: SwiftUI.Binding<Swift.Bool>) -> some SwiftUI.View
  
  public static func ibg_init<S>(_ title: S, isOn: SwiftUI.Binding<Swift.Bool>) -> some SwiftUI.View where S : Swift.StringProtocol
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.Toggle {
  public static func ibg_init<C>(sources: C, isOn: Swift.KeyPath<C.Element, SwiftUI.Binding<Swift.Bool>>, @SwiftUI.ViewBuilder label: () -> Label) -> some SwiftUI.View where C : Swift.RandomAccessCollection
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.Toggle where Label == SwiftUI.Text {
  public static func ibg_init<S, C>(_ title: S, sources: C, isOn: Swift.KeyPath<C.Element, SwiftUI.Binding<Swift.Bool>>) -> some SwiftUI.View where S : Swift.StringProtocol, C : Swift.RandomAccessCollection
  
  public static func ibg_init<C>(_ titleKey: SwiftUI.LocalizedStringKey, sources: C, isOn: Swift.KeyPath<C.Element, SwiftUI.Binding<Swift.Bool>>) -> some SwiftUI.View where C : Swift.RandomAccessCollection
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Toggle where Label == SwiftUI.Label<SwiftUI.Text, SwiftUI.Image> {
  public static func ibg_init(_ titleKey: SwiftUI.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, isOn: SwiftUI.Binding<Swift.Bool>) -> some SwiftUI.View
  
  public static func ibg_init<S>(_ title: S, image: DeveloperToolsSupport.ImageResource, isOn: SwiftUI.Binding<Swift.Bool>) -> some SwiftUI.View where S : Swift.StringProtocol
  
  public static func ibg_init<C>(_ titleKey: SwiftUI.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, sources: C, isOn: Swift.KeyPath<C.Element, SwiftUI.Binding<Swift.Bool>>) -> some SwiftUI.View where C : Swift.RandomAccessCollection
  
  public static func ibg_init<S, C>(_ title: S, image: DeveloperToolsSupport.ImageResource, sources: C, isOn: Swift.KeyPath<C.Element, SwiftUI.Binding<Swift.Bool>>) -> some SwiftUI.View where S : Swift.StringProtocol, C : Swift.RandomAccessCollection
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Toggle where Label == SwiftUI.Label<SwiftUI.Text, SwiftUI.Image> {
  public static func ibg_init(_ titleKey: SwiftUI.LocalizedStringKey, systemImage: Swift.String, isOn: SwiftUI.Binding<Swift.Bool>) -> some SwiftUI.View
  
  public static func ibg_init<S>(_ title: S, systemImage: Swift.String, isOn: SwiftUI.Binding<Swift.Bool>) -> some SwiftUI.View where S : Swift.StringProtocol
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.Toggle where Label == SwiftUI.Label<SwiftUI.Text, SwiftUI.Image> {
  public static func ibg_init<C>(_ titleKey: SwiftUI.LocalizedStringKey, systemImage: Swift.String, sources: C, isOn: Swift.KeyPath<C.Element, SwiftUI.Binding<Swift.Bool>>) -> some SwiftUI.View where C : Swift.RandomAccessCollection
  
  public static func ibg_init<S, C>(_ title: S, systemImage: Swift.String, sources: C, isOn: Swift.KeyPath<C.Element, SwiftUI.Binding<Swift.Bool>>) -> some SwiftUI.View where S : Swift.StringProtocol, C : Swift.RandomAccessCollection
  
}
@available(iOS 13.0, macOS 10.15, tvOS 14.0, watchOS 6.0, *)
extension SwiftUI.Toggle where Label == SwiftUI.ToggleStyleConfiguration.Label {
  public static func ibg_init(_ configuration: SwiftUI.ToggleStyleConfiguration) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Stepper {
  public static func ibg_init<V>(value: SwiftUI.Binding<V>, step: V.Stride = 1, @SwiftUI.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Stepper<Label> where V : Swift.Strideable
  public static func ibg_init<V>(_ titleKey: SwiftUI.LocalizedStringKey, value: SwiftUI.Binding<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Stepper<Label> where Label == SwiftUI.Text, V : Swift.Strideable
  public static func ibg_init<S, V>(_ title: S, value: SwiftUI.Binding<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Stepper<Label> where Label == SwiftUI.Text, S : Swift.StringProtocol, V : Swift.Strideable
  public static func ibg_init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, @SwiftUI.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Stepper<Label> where V : Swift.Strideable
  public static func ibg_init<V>(_ titleKey: SwiftUI.LocalizedStringKey, value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Stepper<Label> where Label == SwiftUI.Text, V : Swift.Strideable
  public static func ibg_init<S, V>(_ title: S, value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Stepper<Label> where Label == SwiftUI.Text, S : Swift.StringProtocol, V : Swift.Strideable
  public static func ibg_init(@SwiftUI.ViewBuilder label: () -> Label, onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Stepper<Label>
  public static func ibg_init(_ titleKey: SwiftUI.LocalizedStringKey, onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Stepper<Label> where Label == SwiftUI.Text
  public static func ibg_init<S>(_ title: S, onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Stepper<Label> where Label == SwiftUI.Text, S : Swift.StringProtocol
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Stepper {
  public static func ibg_init<F>(value: SwiftUI.Binding<F.FormatInput>, step: F.FormatInput.Stride = 1, format: F, @SwiftUI.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Stepper<Label> where F : Foundation.ParseableFormatStyle, F.FormatInput : Swift.BinaryFloatingPoint, F.FormatOutput == Swift.String
  public static func ibg_init<S, F>(_ title: S, value: SwiftUI.Binding<F.FormatInput>, step: F.FormatInput.Stride = 1, format: F, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Stepper<Label> where Label == SwiftUI.Text, S : Swift.StringProtocol, F : Foundation.ParseableFormatStyle, F.FormatInput : Swift.BinaryFloatingPoint, F.FormatOutput == Swift.String
  public static func ibg_init<F>(_ titleKey: SwiftUI.LocalizedStringKey, value: SwiftUI.Binding<F.FormatInput>, step: F.FormatInput.Stride = 1, format: F, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Stepper<Label> where Label == SwiftUI.Text, F : Foundation.ParseableFormatStyle, F.FormatInput : Swift.BinaryFloatingPoint, F.FormatOutput == Swift.String
  public static func ibg_init<F>(value: SwiftUI.Binding<F.FormatInput>, in bounds: Swift.ClosedRange<F.FormatInput>, step: F.FormatInput.Stride = 1, format: F, @SwiftUI.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Stepper<Label> where F : Foundation.ParseableFormatStyle, F.FormatInput : Swift.BinaryFloatingPoint, F.FormatOutput == Swift.String
  public static func ibg_init<F>(_ titleKey: SwiftUI.LocalizedStringKey, value: SwiftUI.Binding<F.FormatInput>, in bounds: Swift.ClosedRange<F.FormatInput>, step: F.FormatInput.Stride = 1, format: F, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Stepper<Label> where Label == SwiftUI.Text, F : Foundation.ParseableFormatStyle, F.FormatInput : Swift.BinaryFloatingPoint, F.FormatOutput == Swift.String
  public static func ibg_init<S, F>(_ title: S, value: SwiftUI.Binding<F.FormatInput>, in bounds: Swift.ClosedRange<F.FormatInput>, step: F.FormatInput.Stride = 1, format: F, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Stepper<Label> where Label == SwiftUI.Text, S : Swift.StringProtocol, F : Foundation.ParseableFormatStyle, F.FormatInput : Swift.BinaryFloatingPoint, F.FormatOutput == Swift.String
}
@available(iOS 13.0, tvOS 13.0, *)
extension SwiftUI.View {
  public func instabugTracedView(name: Swift.String) -> some SwiftUI.View
  
}
@available(iOS 13.0, tvOS 13.0, *)
public struct InstabugTracedView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(name: Swift.String, @SwiftUI.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8Instabug0A10TracedViewV4bodyQrvp", 0) __<Content>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Button {
  public static func ibg_init(action: @escaping () -> Swift.Void, @SwiftUI.ViewBuilder label: () -> Label) -> SwiftUI.Button<Label>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Button where Label == SwiftUI.Text {
  public static func ibg_init(_ titleKey: SwiftUI.LocalizedStringKey, action: @escaping () -> Swift.Void) -> SwiftUI.Button<Label>
  public static func ibg_init<S>(_ title: S, action: @escaping () -> Swift.Void) -> SwiftUI.Button<Label> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Button where Label == SwiftUI.Label<SwiftUI.Text, SwiftUI.Image> {
  public static func ibg_init(_ titleKey: SwiftUI.LocalizedStringKey, systemImage: Swift.String, action: @escaping () -> Swift.Void) -> SwiftUI.Button<Label>
  public static func ibg_init<S>(_ title: S, systemImage: Swift.String, action: @escaping () -> Swift.Void) -> SwiftUI.Button<Label> where S : Swift.StringProtocol
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Button where Label == SwiftUI.Label<SwiftUI.Text, SwiftUI.Image> {
  public static func ibg_init(_ titleKey: SwiftUI.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, action: @escaping () -> Swift.Void) -> SwiftUI.Button<Label>
  public static func ibg_init<S>(_ title: S, image: DeveloperToolsSupport.ImageResource, action: @escaping () -> Swift.Void) -> SwiftUI.Button<Label> where S : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Button {
  public static func ibg_init(role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void, @SwiftUI.ViewBuilder label: () -> Label) -> SwiftUI.Button<Label>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Button where Label == SwiftUI.Text {
  public static func ibg_init(_ titleKey: SwiftUI.LocalizedStringKey, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void) -> SwiftUI.Button<Label>
  public static func ibg_init<S>(_ title: S, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void) -> SwiftUI.Button<Label> where S : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Button where Label == SwiftUI.Label<SwiftUI.Text, SwiftUI.Image> {
  public static func ibg_init(_ titleKey: SwiftUI.LocalizedStringKey, systemImage: Swift.String, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void) -> SwiftUI.Button<Label>
  public static func ibg_init<S>(_ title: S, systemImage: Swift.String, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void) -> SwiftUI.Button<Label> where S : Swift.StringProtocol
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Button where Label == SwiftUI.Label<SwiftUI.Text, SwiftUI.Image> {
  public static func ibg_init(_ titleKey: SwiftUI.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void) -> SwiftUI.Button<Label>
  public static func ibg_init<S>(_ title: S, image: DeveloperToolsSupport.ImageResource, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void) -> SwiftUI.Button<Label> where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Button where Label == SwiftUI.PrimitiveButtonStyleConfiguration.Label {
  public static func ibg_init(_ configuration: SwiftUI.PrimitiveButtonStyleConfiguration) -> SwiftUI.Button<Label>
}
@available(iOS 13.0, tvOS 16.0, *)
extension SwiftUI.Image {
  public func ibg_onTapGesture(count: Swift.Int = 1, perform action: @escaping () -> Swift.Void) -> some SwiftUI.View
  
  @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
  @available(tvOS, unavailable)
  public func ibg_onTapGesture(count: Swift.Int = 1, coordinateSpace: some CoordinateSpaceProtocol = .local, perform action: @escaping (CoreFoundation.CGPoint) -> Swift.Void) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 16.0, watchOS 6.0, *)
extension SwiftUI.Binding : Swift.Equatable where Value == Swift.Bool {
  public static func == (lhs: SwiftUI.Binding<Swift.Bool>, rhs: SwiftUI.Binding<Swift.Bool>) -> Swift.Bool
}
@available(iOS 15.0, tvOS 16.0, *)
extension SwiftUI.AsyncImage {
  public func ibg_onTapGesture(count: Swift.Int = 1, perform action: @escaping () -> Swift.Void) -> some SwiftUI.View
  
  @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
  @available(tvOS, unavailable)
  public func ibg_onTapGesture(count: Swift.Int = 1, coordinateSpace: some CoordinateSpaceProtocol = .local, perform action: @escaping (CoreFoundation.CGPoint) -> Swift.Void) -> some SwiftUI.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Button {
  public static func ibg_init<I>(intent: I, @SwiftUI.ViewBuilder label: () -> Label) -> SwiftUI.Button<Label> where I : AppIntents.AppIntent
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Button where Label == SwiftUI.Text {
  public static func ibg_init(_ titleKey: SwiftUI.LocalizedStringKey, intent: some AppIntent) -> SwiftUI.Button<Label>
  public static func ibg_init<S>(_ title: S, intent: some AppIntent) -> SwiftUI.Button<Label> where S : Swift.StringProtocol
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Button {
  public static func ibg_init(role: SwiftUI.ButtonRole?, intent: some AppIntent, @SwiftUI.ViewBuilder label: () -> Label) -> SwiftUI.Button<Label>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Button where Label == SwiftUI.Text {
  public static func ibg_init(_ titleKey: SwiftUI.LocalizedStringKey, role: SwiftUI.ButtonRole?, intent: some AppIntent) -> SwiftUI.Button<Label>
  public static func ibg_init(_ title: some StringProtocol, role: SwiftUI.ButtonRole?, intent: some AppIntent) -> SwiftUI.Button<Label>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Button where Label == SwiftUI.Label<SwiftUI.Text, SwiftUI.Image> {
  public static func ibg_init(_ titleKey: SwiftUI.LocalizedStringKey, systemImage: Swift.String, role: SwiftUI.ButtonRole? = nil, intent: some AppIntent) -> SwiftUI.Button<Label>
  public static func ibg_init(_ title: some StringProtocol, systemImage: Swift.String, role: SwiftUI.ButtonRole? = nil, intent: some AppIntent) -> SwiftUI.Button<Label>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Button where Label == SwiftUI.Label<SwiftUI.Text, SwiftUI.Image> {
  public static func ibg_init(_ titleKey: SwiftUI.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, role: SwiftUI.ButtonRole? = nil, intent: some AppIntent) -> SwiftUI.Button<Label>
  public static func ibg_init(_ title: some StringProtocol, image: DeveloperToolsSupport.ImageResource, role: SwiftUI.ButtonRole? = nil, intent: some AppIntent) -> SwiftUI.Button<Label>
}
@available(iOS 13.0, tvOS 16.0, *)
extension SwiftUI.Text {
  public func ibg_onTapGesture(count: Swift.Int = 1, perform action: @escaping () -> Swift.Void) -> some SwiftUI.View
  
  @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
  @available(tvOS, unavailable)
  public func ibg_onTapGesture(count: Swift.Int = 1, coordinateSpace: some CoordinateSpaceProtocol = .local, perform action: @escaping (CoreFoundation.CGPoint) -> Swift.Void) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.View {
  public func ibg_onChange<V>(of value: V, perform action: @escaping (_ newValue: V) -> Swift.Void) -> some SwiftUI.View where V : Swift.Equatable
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.View {
  public func ibg_onChange<V>(of value: V, initial: Swift.Bool = false, _ action: @escaping (_ oldValue: V, _ newValue: V) -> Swift.Void) -> some SwiftUI.View where V : Swift.Equatable
  
}
@available(iOS 13.0, macOS 10.15, tvOS 16.0, watchOS 6.0, *)
extension SwiftUI.View {
  public func ibg_onTapGesture(count: Swift.Int = 1, perform action: @escaping () -> Swift.Void) -> some SwiftUI.View
  
  @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
  @available(tvOS, unavailable)
  public func ibg_onTapGesture(count: Swift.Int = 1, coordinateSpace: some CoordinateSpaceProtocol = .local, perform action: @escaping (CoreFoundation.CGPoint) -> Swift.Void) -> some SwiftUI.View
  
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Slider where Label == SwiftUI.EmptyView, ValueLabel == SwiftUI.EmptyView {
  public static func ibg_init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Slider<Label, ValueLabel> where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  public static func ibg_init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Slider<Label, ValueLabel> where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Slider where ValueLabel == SwiftUI.EmptyView {
  public static func ibg_init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUI.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Slider<Label, ValueLabel> where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  public static func ibg_init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, @SwiftUI.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Slider<Label, ValueLabel> where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Slider {
  public static func ibg_init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUI.ViewBuilder label: () -> Label, @SwiftUI.ViewBuilder minimumValueLabel: () -> ValueLabel, @SwiftUI.ViewBuilder maximumValueLabel: () -> ValueLabel, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Slider<Label, ValueLabel> where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  public static func ibg_init<V>(value: SwiftUI.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, step: V.Stride = 1, @SwiftUI.ViewBuilder label: () -> Label, @SwiftUI.ViewBuilder minimumValueLabel: () -> ValueLabel, @SwiftUI.ViewBuilder maximumValueLabel: () -> ValueLabel, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> SwiftUI.Slider<Label, ValueLabel> where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Button {
  public static func logUserStep()
  public static func logUserStep<V>(value: V)
}
@available(iOS 13.0, tvOS 13.0, *)
extension SwiftUI.View {
  public func instabug_privateView() -> some SwiftUI.View
  
}
@available(iOS 13.0, tvOS 13.0, *)
public struct InstabugPrivateView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8Instabug0A11PrivateViewV4bodyQrvp", 0) __<Content>
}
